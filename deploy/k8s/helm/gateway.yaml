---
# Source: gateway/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: ns-micro
---
# Source: gateway/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: micro-gateway-account
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
---
# Source: gateway/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: micro-gateway-registry
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - patch
  - watch
---
# Source: gateway/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: micro-gateway-registry
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: micro-gateway-registry
subjects:
- kind: ServiceAccount
  name: micro-gateway-account
  namespace: ns-micro
---
# Source: gateway/templates/micro-api-svc.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: ns-micro
  name: micro-gateway-api
  labels:
    name: micro-gateway-api
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  # the port that this service should serve on
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30000 # NodePort模式端口
  # label keys and values that must match in order to receive traffic for this service
  selector:
    app.kubernetes.io/name: gateway-api
    app.kubernetes.io/instance: micro
---
# Source: gateway/templates/micro-web-svc.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: ns-micro
  name: micro-gateway-web
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  # the port that this service should serve on
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30002 # NodePort模式端口
  # label keys and values that must match in order to receive traffic for this service
  selector:
    app.kubernetes.io/name: gateway-web
    app.kubernetes.io/instance: micro
  type: LoadBalancer
---
# Source: gateway/templates/micro-api.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ns-micro
  name: micro-gateway-api
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway-api
      app.kubernetes.io/instance: micro
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway-api
        app.kubernetes.io/instance: micro
    spec:
      serviceAccountName: micro-gateway-account
      containers:
      - name: api
        image: "hbchen/micro:v1.14.0_starter_kit"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "25m"
        command: [
          "micro",
          "--registry=kubernetes",
          "--server=rpc",
          "--broker=http",
          "--transport=tcp",
          "--register_ttl=60",
          "--register_interval=30",
          "--selector=cache",
          "--enable_stats",
          "api",
          "--address=:80",
        ]
        ports:
        - containerPort: 80
          name: api-port
---
# Source: gateway/templates/micro-web.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ns-micro
  name: micro-gateway-web
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway-web
      app.kubernetes.io/instance: micro
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway-web
        app.kubernetes.io/instance: micro
    spec:
      serviceAccountName: micro-gateway-account
      containers:
      - name: web
        image: "hbchen/micro:v1.14.0_starter_kit"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "25m"
        command: [
          "micro",
          "--registry=kubernetes",
          "--server=rpc",
          "--broker=http",
          "--transport=tcp",
          "--register_ttl=60",
          "--register_interval=30",
          "--selector=cache",
          "--enable_stats",
          "web",
          "--address=:80",
        ]
        ports:
        - containerPort: 80
          name: web-port
---
# Source: gateway/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ns-micro
  name: ingress-micro-gateway-api
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
  - host: api.starter-kit.com
    http:
      paths:
      - path: /
        backend:
          serviceName: micro-gateway-api
          servicePort: 80
---
# Source: gateway/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ns-micro
  name: ingress-micro-gateway-web
spec:
  rules:
  - host: www.starter-kit.com
    http:
      paths:
      - path: /
        backend:
          serviceName: micro-gateway-web
          servicePort: 80
---
# Source: gateway/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "micro-gateway-test-connection"
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['micro-gateway:80']
  restartPolicy: Never
---
# Source: gateway/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: ns-micro
---
# Source: gateway/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: micro-gateway-account
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
---
# Source: gateway/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: micro-gateway-registry
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - patch
  - watch
---
# Source: gateway/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: micro-gateway-registry
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: micro-gateway-registry
subjects:
- kind: ServiceAccount
  name: micro-gateway-account
  namespace: ns-micro
---
# Source: gateway/templates/micro-api-svc.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: ns-micro
  name: micro-gateway-api
  labels:
    name: micro-gateway-api
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  # the port that this service should serve on
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30000 # NodePort模式端口
  # label keys and values that must match in order to receive traffic for this service
  selector:
    app.kubernetes.io/name: gateway-api
    app.kubernetes.io/instance: micro
---
# Source: gateway/templates/micro-web-svc.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: ns-micro
  name: micro-gateway-web
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  # the port that this service should serve on
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30002 # NodePort模式端口
  # label keys and values that must match in order to receive traffic for this service
  selector:
    app.kubernetes.io/name: gateway-web
    app.kubernetes.io/instance: micro
  type: LoadBalancer
---
# Source: gateway/templates/micro-api.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ns-micro
  name: micro-gateway-api
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway-api
      app.kubernetes.io/instance: micro
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway-api
        app.kubernetes.io/instance: micro
    spec:
      serviceAccountName: micro-gateway-account
      containers:
      - name: api
        image: "hbchen/micro:v1.14.0_starter_kit"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "25m"
        command: [
          "micro",
          "--registry=kubernetes",
          "--server=rpc",
          "--broker=http",
          "--transport=tcp",
          "--register_ttl=60",
          "--register_interval=30",
          "--selector=cache",
          "--enable_stats",
          "api",
          "--address=:80",
        ]
        ports:
        - containerPort: 80
          name: api-port
---
# Source: gateway/templates/micro-web.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ns-micro
  name: micro-gateway-web
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway-web
      app.kubernetes.io/instance: micro
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway-web
        app.kubernetes.io/instance: micro
    spec:
      serviceAccountName: micro-gateway-account
      containers:
      - name: web
        image: "hbchen/micro:v1.14.0_starter_kit"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "25m"
        command: [
          "micro",
          "--registry=kubernetes",
          "--server=rpc",
          "--broker=http",
          "--transport=tcp",
          "--register_ttl=60",
          "--register_interval=30",
          "--selector=cache",
          "--enable_stats",
          "web",
          "--address=:80",
        ]
        ports:
        - containerPort: 80
          name: web-port
---
# Source: gateway/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ns-micro
  name: ingress-micro-gateway-api
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
  - host: api.starter-kit.com
    http:
      paths:
      - path: /
        backend:
          serviceName: micro-gateway-api
          servicePort: 80
---
# Source: gateway/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ns-micro
  name: ingress-micro-gateway-web
spec:
  rules:
  - host: www.starter-kit.com
    http:
      paths:
      - path: /
        backend:
          serviceName: micro-gateway-web
          servicePort: 80
---
# Source: gateway/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "micro-gateway-test-connection"
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['micro-gateway:80']
  restartPolicy: Never
---
# Source: gateway/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: ns-micro
---
# Source: gateway/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: micro-gateway-account
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
---
# Source: gateway/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: micro-gateway-registry
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - patch
  - watch
---
# Source: gateway/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: micro-gateway-registry
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: micro-gateway-registry
subjects:
- kind: ServiceAccount
  name: micro-gateway-account
  namespace: ns-micro
---
# Source: gateway/templates/micro-api-svc.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: ns-micro
  name: micro-gateway-api
  labels:
    name: micro-gateway-api
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  # the port that this service should serve on
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30000 # NodePort模式端口
  # label keys and values that must match in order to receive traffic for this service
  selector:
    app.kubernetes.io/name: gateway-api
    app.kubernetes.io/instance: micro
---
# Source: gateway/templates/micro-web-svc.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: ns-micro
  name: micro-gateway-web
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  # the port that this service should serve on
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30002 # NodePort模式端口
  # label keys and values that must match in order to receive traffic for this service
  selector:
    app.kubernetes.io/name: gateway-web
    app.kubernetes.io/instance: micro
  type: LoadBalancer
---
# Source: gateway/templates/micro-api.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ns-micro
  name: micro-gateway-api
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway-api
      app.kubernetes.io/instance: micro
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway-api
        app.kubernetes.io/instance: micro
    spec:
      serviceAccountName: micro-gateway-account
      containers:
      - name: api
        image: "hbchen/micro:v1.14.0_starter_kit"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "25m"
        command: [
          "micro",
          "--registry=kubernetes",
          "--server=rpc",
          "--broker=http",
          "--transport=tcp",
          "--register_ttl=60",
          "--register_interval=30",
          "--selector=cache",
          "--enable_stats",
          "api",
          "--address=:80",
        ]
        ports:
        - containerPort: 80
          name: api-port
---
# Source: gateway/templates/micro-web.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ns-micro
  name: micro-gateway-web
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway-web
      app.kubernetes.io/instance: micro
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway-web
        app.kubernetes.io/instance: micro
    spec:
      serviceAccountName: micro-gateway-account
      containers:
      - name: web
        image: "hbchen/micro:v1.14.0_starter_kit"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "25m"
        command: [
          "micro",
          "--registry=kubernetes",
          "--server=rpc",
          "--broker=http",
          "--transport=tcp",
          "--register_ttl=60",
          "--register_interval=30",
          "--selector=cache",
          "--enable_stats",
          "web",
          "--address=:80",
        ]
        ports:
        - containerPort: 80
          name: web-port
---
# Source: gateway/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ns-micro
  name: ingress-micro-gateway-api
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
  - host: api.starter-kit.com
    http:
      paths:
      - path: /
        backend:
          serviceName: micro-gateway-api
          servicePort: 80
---
# Source: gateway/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ns-micro
  name: ingress-micro-gateway-web
spec:
  rules:
  - host: www.starter-kit.com
    http:
      paths:
      - path: /
        backend:
          serviceName: micro-gateway-web
          servicePort: 80
---
# Source: gateway/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: ns-micro
---
# Source: gateway/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: micro-gateway-account
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
---
# Source: gateway/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: micro-gateway-registry
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - patch
  - watch
---
# Source: gateway/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: micro-gateway-registry
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: micro-gateway-registry
subjects:
- kind: ServiceAccount
  name: micro-gateway-account
  namespace: ns-micro
---
# Source: gateway/templates/micro-api-svc.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: ns-micro
  name: micro-gateway-api
  labels:
    name: micro-gateway-api
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  # the port that this service should serve on
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30000 # NodePort模式端口
  # label keys and values that must match in order to receive traffic for this service
  selector:
    app.kubernetes.io/name: gateway-api
    app.kubernetes.io/instance: micro
---
# Source: gateway/templates/micro-web-svc.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: ns-micro
  name: micro-gateway-web
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  # the port that this service should serve on
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30002 # NodePort模式端口
  # label keys and values that must match in order to receive traffic for this service
  selector:
    app.kubernetes.io/name: gateway-web
    app.kubernetes.io/instance: micro
  type: LoadBalancer
---
# Source: gateway/templates/micro-api.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ns-micro
  name: micro-gateway-api
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway-api
      app.kubernetes.io/instance: micro
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway-api
        app.kubernetes.io/instance: micro
    spec:
      serviceAccountName: micro-gateway-account
      containers:
      - name: api
        image: "hbchen/micro:v1.14.0_starter_kit"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "25m"
        command: [
          "micro",
          "--registry=kubernetes",
          "--server=rpc",
          "--broker=http",
          "--transport=tcp",
          "--register_ttl=60",
          "--register_interval=30",
          "--selector=cache",
          "--enable_stats",
          "api",
          "--address=:80",
        ]
        ports:
        - containerPort: 80
          name: api-port
---
# Source: gateway/templates/micro-web.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ns-micro
  name: micro-gateway-web
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway-web
      app.kubernetes.io/instance: micro
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway-web
        app.kubernetes.io/instance: micro
    spec:
      serviceAccountName: micro-gateway-account
      containers:
      - name: web
        image: "hbchen/micro:v1.14.0_starter_kit"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "25m"
        command: [
          "micro",
          "--registry=kubernetes",
          "--server=rpc",
          "--broker=http",
          "--transport=tcp",
          "--register_ttl=60",
          "--register_interval=30",
          "--selector=cache",
          "--enable_stats",
          "web",
          "--address=:80",
        ]
        ports:
        - containerPort: 80
          name: web-port
---
# Source: gateway/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ns-micro
  name: ingress-micro-gateway-api
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
  - host: api.starter-kit.com
    http:
      paths:
      - path: /
        backend:
          serviceName: micro-gateway-api
          servicePort: 80
---
# Source: gateway/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ns-micro
  name: ingress-micro-gateway-web
  labels:
    helm.sh/chart: gateway-0.1.0
    app.kubernetes.io/instance: micro
    app.kubernetes.io/version: "v1.14.0_starter_kit"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
  - host: www.starter-kit.com
    http:
      paths:
      - path: /
        backend:
          serviceName: micro-gateway-web
          servicePort: 80
