---
kind: pipeline
type: docker
name: linux-amd64

platform:
  arch: amd64
  os: linux

workspace:
  path: github.com/micro-in-cn/starter-kit

steps:
  - name: deploy-dev
    image: dtzar/helm-kubectl:3.1.1
    environment:
      SERVER:
        from_secret: k8s_server
      CERTIFICATE_AUTHORITY_DATA:
        from_secret: k8s_ca
      USER_TOKEN:
        from_secret: k8s_token
    commands:
      - kubectl config set-cluster k8s --server="$${SERVER}"
      - kubectl config set clusters.k8s.certificate-authority-data "$${CERTIFICATE_AUTHORITY_DATA}"
      - kubectl config set-credentials k8s-admin --token="$${USER_TOKEN}"
      - kubectl config set-context default --cluster=k8s --user=k8s-admin
      - kubectl config use-context default
      - helm template micro ./deploy/k8s/helm/starter-kit/charts/gateway --namespace starter-kit --set image.tag=${DRONE_TAG=latest} --set image.pullPolicy=Always | kubectl apply -f -
    when:
      branch:
        - master
      event:
        - push
#steps:
#  - name: build
#    image: golang:1.13-alpine
#    environment:
#      GOOS: linux
#      GOARCH: amd64
#      CGO_ENABLED: 0
#      GOPROXY: https://mirrors.aliyun.com/goproxy/
#      GOSUMDB: off
#    commands:
#      - pwd
#      - go version
#      - cd gateway
#      - go build -o ./bin/linux_amd64/micro main.go plugin.go
#      - ./bin/linux_amd64/micro --version
#  - name: publish
#    image: plugins/docker
#    settings:
#      auto_tag: true
#      dockerfile: gateway/Dockerfile
#      context: ./gateway
#      repo: hbchen/starter-kit-gateway
#      username:
#        from_secret: docker_username
#      password:
#        from_secret: docker_password
#    when:
#      branch:
#        - master
#      event:
#        - push
#        - tag
#  - name: deploy-dev
#    image: dtzar/helm-kubectl:3.1.1
#    environment:
#      SERVER:
#        from_secret: k8s_server
#      CERTIFICATE_AUTHORITY_DATA:
#        from_secret: k8s_ca
#      USER_TOKEN:
#        from_secret: k8s_token
#    commands:
#      - kubectl config set-cluster k8s --server="$${SERVER}"
#      - kubectl config set clusters.k8s.certificate-authority-data "$${CERTIFICATE_AUTHORITY_DATA}"
#      - kubectl config set-credentials k8s-admin --token="$${USER_TOKEN}"
#      - kubectl config set-context default --cluster=k8s --user=k8s-admin
#      - kubectl config use-context default
#      - helm template micro ./deploy/k8s/helm/starter-kit/charts/gateway --namespace starter-kit --set image.tag=${DRONE_TAG=latest} --set image.pullPolicy=Always | kubectl apply -f -
#    when:
#      branch:
#        - master
#      event:
#        - push
#        - tag
